@page "/cliente/Editar/{id}"
@using PortalAlunoWeb_Front.Shared
@using PortalAlunoWeb_Front.Data
@inject HttpClient http
@inject NavigationManager navigation

@*os 3 de baixo é para inicializar o toast*@
@using PortalAlunoWeb_Front.Service
@using PortalAlunoWeb_Domain.Enumerador
@inject ToastService toastService

<div class="row border-bottom white-bg dashboard-header">
    <div class="col-sm-8">
        <BarNavegation breadCrumb="@breadcrumbLinks" Title="Atualização de Cliente"></BarNavegation>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="ibox-content p-xl">
                <div class="row">
                    <ClienteForm Cliente="cliente" ButtonTextCancelar="Cancelar" ButtonTextSubmit="Atualizar" EnviarFormCliente="BuscarClientePorId"></ClienteForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    public Cliente cliente = new Cliente();

    public List<BreadCrumb> breadcrumbLinks = new List<BreadCrumb>();

    public ReturnObject retorno = new ReturnObject();

    protected override async Task OnInitializedAsync()
    {
        BreadCrumb breadCrumb = new BreadCrumb
            {
                Address = "/",
                Title = "Início",
                IsActive = false,
                OrderIndex = 1
            };
        breadcrumbLinks.Add(breadCrumb);

        breadCrumb = new BreadCrumb
            {
                Address = "/Cliente",
                Title = "Gestão de Cliente",
                IsActive = false,
                OrderIndex = 2
            };
        breadcrumbLinks.Add(breadCrumb);

        breadCrumb = new BreadCrumb
            {
                Address = "/Cliente",
                Title = "Alteração de Cliente",
                IsActive = true,
                OrderIndex = 3
            };
        breadcrumbLinks.Add(breadCrumb);

        if (id != "0" && id != "")
        {
            await BuscarClientePorId();
        }
    }
    public async Task<Cliente> BuscarClientePorId()
    {
        cliente = await http.GetFromJsonAsync<Cliente>("https://localhost:7126/api/cliente/" + id);
        cliente.Endereco.cep=cliente.CEP;
        cliente.Endereco.logradouro=cliente.LOGRADOURO;
        cliente.Endereco.numero=cliente.NUMERO;
        cliente.Endereco.localidade=cliente.LOCALIDADE;
        cliente.Endereco.bairro=cliente.BAIRRO;
        cliente.Endereco.uf = cliente.UF;
        return cliente;
        StateHasChanged();
    }
    public async Task<ReturnObject> AtualizarCliente()
    {
        try
        {
            retorno = await http.PutJsonAsync<ReturnObject>("https://localhost:7126/api/cliente/",cliente);
            toastService.ShowToast("Cliente criado com sucesso!", ToastLevel.Success);
            navigation.NavigateTo("cliente");
            return retorno;
        }
        catch (Exception ex)
        {
            toastService.ShowToast("Ocorreu um erro", ToastLevel.Error);
            return retorno;
        }

    }
}